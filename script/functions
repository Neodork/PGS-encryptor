#!/usr/bin/env bash

function is_encrypted {
    if [ -f ${ENCRYPTED_KEYS_FILE} ] || [ -f ${ENCRYPTED_FULL_KEYS_FILE} ]; then
        return 0;
    fi
    return 1;
}

function check_binaries {

    [ -z "${SSH_AGENT_BIN}" ] && echo "No ssh-agent bin found! Exiting..." && exit 1
    [ -z "${SSH_ADD_BIN}" ] && echo "No ssh-add bin found! Exiting..." && exit 1
    [ -z "${GPG_BIN}" ] && echo "No GPG bin found! Exiting..." && exit 1
    [ -z "${TAR_BIN}" ] && echo "No TAR bin found! Exiting..." && exit 1
    [ -z "${TOUCH_BIN}" ] && echo "No Touch bin found! Exiting..." && exit 13
}

function print_separator {
      echo "-------------------------------------------------"
}

function encrypt_private_keys {

    # Tar directories
    ${TAR_BIN} czf ${SSH_KEY_TAR} ${SSH_KEY_DIR}

    # Set GPG home to our USB GPG home
    export GNUPGHOME=${GPG_HOME_DIR}

    ${GPG_BIN} --encrypt --options ${GPG_AGENT_CONFIG_FILE} -r ${KEY_OWNER_NAME} ${SSH_KEY_TAR} && {
      echo "gpg: Encryption of $SSH_KEY_TAR complete! Removing unencrypted resources.."
      ${RM_BIN} -r ${SSH_KEY_DIR}
      ${RM_BIN} ${SSH_KEY_TAR}
      } || {
      remove_tars && echo "ERROR! $SSH_KEY_TAR failed to encrypt" && exit 1;
    }
}

function encrypt_all_keys {

    # Tar directories
    ${TAR_BIN} czf ${SSH_FULL_KEY_TAR} ${SSH_FULL_KEY_DIR}

    # Set GPG home to our USB GPG home
    export GNUPGHOME=${GPG_HOME_DIR}

    ${GPG_BIN} --encrypt --options ${GPG_AGENT_CONFIG_FILE} -r ${KEY_OWNER_NAME} ${SSH_FULL_KEY_TAR} && {
      echo "GPG: Encryption of $SSH_FULL_KEY_TAR complete! Removing unencrypted resources.."
      ${RM_BIN} -r ${SSH_FULL_KEY_DIR} && ${RM_BIN} ${SSH_FULL_KEY_TAR}
      } || {
      remove_tars && echo "ERROR! $SSH_FULL_KEY_TAR failed to encrypt" && exit 1;
    }
}

function decrypt_private_keys {
    if [ -f ${ENCRYPTED_KEYS_FILE} ]; then
    ${GPG_BIN} --decrypt --output ${SSH_KEY_TAR} --options ${GPG_AGENT_CONFIG_FILE} -r ${KEY_OWNER_NAME} ${ENCRYPTED_KEYS_FILE} && {
      echo "gpg: Decryption of ${ENCRYPTED_KEYS_FILE} complete! Removing encrypted resources.."
      ${RM_BIN} ${ENCRYPTED_KEYS_FILE} && print_separator
      } || {
      echo "ERROR! $SSH_KEY_TAR failed to decrypt" && print_separator && exit 1;
    }
    else
        echo "Skipping ${ENCRYPTED_KEYS_FILE}, file not found..."
    fi
}

function decrypt_all_keys {
    if [ -f ${ENCRYPTED_FULL_KEYS_FILE} ]; then
    ${GPG_BIN} --decrypt --output ${SSH_FULL_KEY_TAR} --options ${GPG_AGENT_CONFIG_FILE} -r ${KEY_OWNER_NAME} ${ENCRYPTED_FULL_KEYS_FILE} && {
      echo "gpg: Decryption of ${ENCRYPTED_FULL_KEYS_FILE} complete! Removing encrypted resources.."
      print_separator
      ${RM_BIN} ${ENCRYPTED_FULL_KEYS_FILE}
      } || {
      echo "ERROR! $SSH_FULL_KEY_TAR failed to decrypt" && print_separator && exit 1;
     }
    else
        echo "Skipping ${ENCRYPTED_FULL_KEYS_FILE}, file not found..." && print_separator
    fi
}

function clear_gpg_agent_files {
    echo "Clearing gpg-agent symlink files..."

    if [ -e "${GPG_HOME_DIR}/S.gpg-agent" ]; then
        echo "clear agent files!"
        ${UNLINK_BIN} ${GPG_HOME_DIR}/S.gpg-agent
    fi

    if [ -e "${GPG_HOME_DIR}/S.gpg-agent.browser" ]; then
        ${UNLINK_BIN} ${GPG_HOME_DIR}/S.gpg-agent.browser
    fi

    if [ -e "${GPG_HOME_DIR}/S.gpg-agent.extra" ]; then
        ${UNLINK_BIN} ${GPG_HOME_DIR}/S.gpg-agent.extra
    fi

    if [ -e "${GPG_HOME_DIR}/S.gpg-agent.ssh" ]; then
        ${UNLINK_BIN} ${GPG_HOME_DIR}/S.gpg-agent.ssh
    fi
}

function set_gpg_home {
    # Set GPG home to our USB GPG home
    export GNUPGHOME=${GPG_HOME_DIR}
}

function flush_passphrase_cache {
    # Forget cached passphrases
    printf "Dumping passphrase cache..."  && printf RELOADAGENT | gpg-connect-agent
    print_separator
}

function kill_agent {
    killall gpg-agent
}

function untar {
    # Untar files
    for file in *.tar.gz; do ${TAR_BIN} xzvf "${file}" && echo "\nTar: Completed unpacking archive, removing ${file}" && print_separator && ${RM_BIN} "${file}"; done
}

function remove_tars {
    # Remove tar files
    for file in *.tar.gz; do ${RM_BIN} "${file}"; done
}