#!/usr/bin/env bash

DIR="${BASH_SOURCE%/*}"
if [[ ! -d "$DIR" ]]; then DIR="$PWD"; fi
. "$DIR/script/globals"
. "$DIR/script/functions"

# Don't start if the system does not satisfy the requires binaries.
check_binaries

function check_requirements {

    print_separator

    echo "Checking folder requirements...\r\n"

    if [ ! -d "$SSH_KEY_DIR" ]; then
        echo "Could not find: $SSH_KEY_DIR directory, creating..."
        ${MKDIR_BIN} ${SSH_KEY_DIR}
        ${CHMOD_BIN} -R 700 ${SSH_KEY_DIR}
    fi

    if [ ! -d "$SSH_FULL_KEY_DIR" ]; then
        echo "Could not find: $SSH_FULL_KEY_DIR directory, creating..."
        ${MKDIR_BIN} ${SSH_FULL_KEY_DIR}
        ${CHMOD_BIN} -R 700 ${SSH_FULL_KEY_DIR}
    fi

    if [ ! -d "$GPG_HOME_DIR" ]; then
        echo "Could not find: $GPG_HOME_DIR directory, creating..."
        ${MKDIR_BIN} ${GPG_HOME_DIR}
        ${CHMOD_BIN} -R 700 ${GPG_HOME_DIR}
    fi

    print_separator

    generate_master_key
}

function generate_master_key {

    set_gpg_home
	
	#[[ $(${GPG_AGENT}) == *"no agent running"* ]] && echo "NOT RUNNING BRO!"

    # Check for version and call generate command.
    echo $GPG_VERSION
	if [ $GPG_VERSION -ge 2 ]; then
        ${GPG_BIN} --full-gen-key
    else
        ${GPG_BIN} --gen-key
    fi

    ${TOUCH_BIN} ${GPG_HOME_DIR}/gpg.conf
    ${TOUCH_BIN} ${GPG_HOME_DIR}/gpg-agent.conf

    ${CHMOD_BIN} -R 700 ${GPG_HOME_DIR}/*
}


echo "Are you sure you want to initialize this drive?"
echo "Running init on a drive that was already initialized can cause a lockout of your encrypted files! (y/n)"
echo    # Move to a new line
select yn in "Yes" "No"; do
    case $yn in
        Yes ) check_requirements; break;;
        No ) exit;;
    esac
done